# -*- coding: utf-8 -*-
<<<<<<< HEAD
from typing import List

try:
    from django.contrib.auth.base_user import BaseUserManager
except ImportError:
    from django.contrib.auth.models import BaseUserManager
=======
import argparse
import string
import secrets
from typing import List

>>>>>>> 6cbdd50e (I commit)
from django.core.management.base import BaseCommand
from django_extensions.management.utils import signalcommand


class Command(BaseCommand):
<<<<<<< HEAD
    help = "Generates a new password that can be used for a user password. This uses Django core's default password generator `BaseUserManager.make_random_password()`."
=======
    help = "Generates a simple new password that can be used for a user password. "
    "Uses Pythonâ€™s secrets module to generate passwords. Do not use this command to "
    "generate your most secure passwords."
>>>>>>> 6cbdd50e (I commit)

    requires_system_checks: List[str] = []

    def add_arguments(self, parser):
        parser.add_argument(
<<<<<<< HEAD
            '--length', nargs='?', type=int,
            help='Password length.')

    @signalcommand
    def handle(self, *args, **options):
        length = options['length']
        manager = BaseUserManager()

        if length:
            return manager.make_random_password(length)
        else:
            return manager.make_random_password()
=======
            "-l", "--length", nargs="?", type=int, default=16, help="Password length."
        )
        parser.add_argument(
            "-c",
            "--complex",
            action=argparse.BooleanOptionalAction,
            help="More complex alphabet, includes punctuation",
        )

    @signalcommand
    def handle(self, *args, **options):
        length = options["length"]

        alphabet = string.ascii_letters + string.digits
        if options["complex"]:
            alphabet += string.punctuation
        return "".join(secrets.choice(alphabet) for i in range(length))
>>>>>>> 6cbdd50e (I commit)
