# -*- coding: utf-8 -*-
import time
import traceback
from contextlib import contextmanager

from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.db.backends import utils

from django_extensions.settings import DEFAULT_PRINT_SQL_TRUNCATE_CHARS


@contextmanager
<<<<<<< HEAD
def monkey_patch_cursordebugwrapper(print_sql=None, print_sql_location=False, truncate=None, logger=print, confprefix="DJANGO_EXTENSIONS"):
=======
def monkey_patch_cursordebugwrapper(
    print_sql=None,
    print_sql_location=False,
    truncate=None,
    logger=print,
    confprefix="DJANGO_EXTENSIONS",
):
>>>>>>> 6cbdd50e (I commit)
    if not print_sql:
        yield
    else:
        if truncate is None:
<<<<<<< HEAD
            truncate = getattr(settings, '%s_PRINT_SQL_TRUNCATE' % confprefix, DEFAULT_PRINT_SQL_TRUNCATE_CHARS)

        sqlparse = None
        if getattr(settings, '%s_SQLPARSE_ENABLED' % confprefix, True):
=======
            truncate = getattr(
                settings,
                "%s_PRINT_SQL_TRUNCATE" % confprefix,
                DEFAULT_PRINT_SQL_TRUNCATE_CHARS,
            )

        sqlparse = None
        if getattr(settings, "%s_SQLPARSE_ENABLED" % confprefix, True):
>>>>>>> 6cbdd50e (I commit)
            try:
                import sqlparse

                sqlparse_format_kwargs_defaults = dict(
                    reindent_aligned=True,
                    truncate_strings=500,
                )
<<<<<<< HEAD
                sqlparse_format_kwargs = getattr(settings, '%s_SQLPARSE_FORMAT_KWARGS' % confprefix, sqlparse_format_kwargs_defaults)
=======
                sqlparse_format_kwargs = getattr(
                    settings,
                    "%s_SQLPARSE_FORMAT_KWARGS" % confprefix,
                    sqlparse_format_kwargs_defaults,
                )
>>>>>>> 6cbdd50e (I commit)
            except ImportError:
                sqlparse = None

        pygments = None
<<<<<<< HEAD
        if getattr(settings, '%s_PYGMENTS_ENABLED' % confprefix, True):
=======
        if getattr(settings, "%s_PYGMENTS_ENABLED" % confprefix, True):
>>>>>>> 6cbdd50e (I commit)
            try:
                import pygments.lexers
                import pygments.formatters

<<<<<<< HEAD
                pygments_formatter = getattr(settings, '%s_PYGMENTS_FORMATTER' % confprefix, pygments.formatters.TerminalFormatter)
                pygments_formatter_kwargs = getattr(settings, '%s_PYGMENTS_FORMATTER_KWARGS' % confprefix, {})
=======
                pygments_formatter = getattr(
                    settings,
                    "%s_PYGMENTS_FORMATTER" % confprefix,
                    pygments.formatters.TerminalFormatter,
                )
                pygments_formatter_kwargs = getattr(
                    settings, "%s_PYGMENTS_FORMATTER_KWARGS" % confprefix, {}
                )
>>>>>>> 6cbdd50e (I commit)
            except ImportError:
                pass

        class PrintQueryWrapperMixin:
            def execute(self, sql, params=()):
                starttime = time.time()
                try:
                    return utils.CursorWrapper.execute(self, sql, params)
                finally:
                    execution_time = time.time() - starttime
                    raw_sql = self.db.ops.last_executed_query(self.cursor, sql, params)
                    if truncate:
                        raw_sql = raw_sql[:truncate]

                    if sqlparse:
                        raw_sql = sqlparse.format(raw_sql, **sqlparse_format_kwargs)

                    if pygments:
                        raw_sql = pygments.highlight(
                            raw_sql,
                            pygments.lexers.get_lexer_by_name("sql"),
                            pygments_formatter(**pygments_formatter_kwargs),
                        )

                    logger(raw_sql)
<<<<<<< HEAD
                    logger("Execution time: %.6fs [Database: %s]" % (execution_time, self.db.alias))
                    if print_sql_location:
                        logger("Location of SQL Call:")
                        logger(''.join(traceback.format_stack()))
=======
                    logger(
                        "Execution time: %.6fs [Database: %s]"
                        % (execution_time, self.db.alias)
                    )
                    if print_sql_location:
                        logger("Location of SQL Call:")
                        logger("".join(traceback.format_stack()))
>>>>>>> 6cbdd50e (I commit)

        _CursorDebugWrapper = utils.CursorDebugWrapper

        class PrintCursorQueryWrapper(PrintQueryWrapperMixin, _CursorDebugWrapper):
            pass

        try:
            from django.db import connections
<<<<<<< HEAD
            _force_debug_cursor = {}
            for connection_name in connections:
                _force_debug_cursor[connection_name] = connections[connection_name].force_debug_cursor
=======

            _force_debug_cursor = {}
            for connection_name in connections:
                _force_debug_cursor[connection_name] = connections[
                    connection_name
                ].force_debug_cursor
>>>>>>> 6cbdd50e (I commit)
        except Exception:
            connections = None

        utils.CursorDebugWrapper = PrintCursorQueryWrapper

        postgresql_base = None
        try:
            from django.db.backends.postgresql import base as postgresql_base
<<<<<<< HEAD
            _PostgreSQLCursorDebugWrapper = postgresql_base.CursorDebugWrapper

            class PostgreSQLPrintCursorDebugWrapper(PrintQueryWrapperMixin, _PostgreSQLCursorDebugWrapper):
=======

            _PostgreSQLCursorDebugWrapper = postgresql_base.CursorDebugWrapper

            class PostgreSQLPrintCursorDebugWrapper(
                PrintQueryWrapperMixin, _PostgreSQLCursorDebugWrapper
            ):
>>>>>>> 6cbdd50e (I commit)
                pass
        except (ImproperlyConfigured, TypeError):
            postgresql_base = None

        if postgresql_base:
            postgresql_base.CursorDebugWrapper = PostgreSQLPrintCursorDebugWrapper

        if connections:
            for connection_name in connections:
                connections[connection_name].force_debug_cursor = True

        yield

        utils.CursorDebugWrapper = _CursorDebugWrapper

        if postgresql_base:
            postgresql_base.CursorDebugWrapper = _PostgreSQLCursorDebugWrapper

        if connections:
            for connection_name in connections:
<<<<<<< HEAD
                connections[connection_name].force_debug_cursor = _force_debug_cursor[connection_name]
=======
                connections[connection_name].force_debug_cursor = _force_debug_cursor[
                    connection_name
                ]
>>>>>>> 6cbdd50e (I commit)
